type Type {
    id: ID!
    name: String!
    description: String!
}

input TypeInput {
    id: ID!
    name: String!
    description: String!
}

input UpdateTypeInput {
    id: ID!
    name: String!
    description: String!
}

type Coffee {
    id: ID!
    name: String!
    description: String!
    brand: String!
    price: String!
    type: String!
}

input CoffeeInput {
    id: ID!
    name: String!
    description: String!
    brand: String!
    price: String!
    type: String!
}

input UpdateCoffeeInput {
    id: ID!
    name: String!
    description: String!
    brand: String!
    price: String!
    type: String!
}

type CaffeeCommand {

    coffee: String!
    quantity: Int!

}

input CaffeeCommandInput {

    coffee: String!
    quantity: Int!

}

type Command {
    id: ID!
    coffee: [CaffeeCommand]
    totalPrice: Float
    username: String!
}

input CommandInput {
    id: ID!
    coffee: [CaffeeCommandInput]!
}

input UpdateCommandInput {
    id: ID!
    coffee: [CaffeeCommandInput!]!
}


type Bill {
    id: ID!
    command: String!
    username: String!
}

input BillInput {
    id: ID!
    command: String!
}

input UpdateBillInput {
    id: ID!
    command: String!
}

type Payment {
    id: ID!
    bill: String!
    username: String
}

input PaymentInput {
    id: ID!
    bill: String!
}

input UpdatePaymentInput {
    id: ID!
    bill: String!
}

type Query  {
  getCoffeeById(coffeeId: String!): Coffee
  

  listCoffees: [Coffee]
  

  getOrderById(commandId: String!): Command
  

  listOrders: [Command]
  

  getTypeById(typeId: String!): Type
  

  listTypes: [Type]
  

  getBillById(billId: String!): Bill
  

  listBills: [Bill]
  

  getPaymentById(paymentId: String!): Payment
  

  listPayments: [Payment]
  

}

type Mutation {

  createCoffee(coffee: CoffeeInput!): Coffee
  

  updateCoffee(coffee: UpdateCoffeeInput!): Coffee
  

  deleteCoffee(coffeeId: String!): String
  

  createType(type: TypeInput!): Type
  

  updateType(type: UpdateTypeInput!): Type
  

  deleteType(typeId: String!): String
  

  createCommand(command: CommandInput!): Command
  

  updateCommand(command: UpdateCommandInput!): Command
  

  deleteCommand(commandId: String!): String
  

  createBill(bill: BillInput!): Bill
  

  updateBill(bill: UpdateBillInput!): Bill
  

  deleteBill(billId: String!): String
  

  createPayment(payment: PaymentInput!): Payment
  

  updatePayment(payment: UpdatePaymentInput!): Payment
  

  deletePayment(paymentId: String!): String
  

}
